/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.geraudbourdin.infrared;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import android.hardware.ConsumerIrManager;

@Kroll.module(name = "TiInfrared", id = "com.geraudbourdin.infrared")
public class TiInfraredModule extends KrollModule {

	private static final String LCAT = "TiInfraredModule";

	ConsumerIrManager cIr;

	public TiInfraredModule() {
		super();

		if (TiApplication.getInstance().getSystemService("consumer_ir") != null) {
			Log.d(LCAT, "Using consumer_ir service");
			cIr = (ConsumerIrManager) TiApplication.getInstance()
					.getSystemService("consumer_ir");
		}

	}

	@Kroll.method
	public void prontoHexTransmit(final String data) {
		String patternData = hex2dec(data);
		int frequency = getFrequecy(patternData);
		cIr.transmit(frequency, getListData(patternData));
	}

	protected int[] getListData(String irData) {
		List<String> list = new ArrayList<String>(Arrays.asList(irData
				.split(",")));
		list.remove(0); // unused.
		int[] intArray = new int[list.size()];
		for (int i = 0; i < list.size(); i++) {
			intArray[i] = Integer.parseInt(list.get(i));
		}
		return intArray;
	}

	@Kroll.method
	protected String hex2dec(String irData) {
		List<String> list = new ArrayList<String>(Arrays.asList(irData
				.split(" ")));
		list.remove(0);
		int frequency = Integer.parseInt(list.remove(0), 16);
		list.remove(0);
		list.remove(0);

		for (int i = 0; i < list.size(); i++) {
			list.set(i, Integer.toString(Integer.parseInt(list.get(i), 16)));
		}

		frequency = (int) (1000000 / (frequency * 0.241246));
		list.add(0, Integer.toString(frequency));

		irData = "";
		for (String s : list) {
			irData += s + ",";
		}
		return irData;
	}

	@Kroll.method
	public void transmit(final String data) {
		int frequency = getFrequecy(data);
		cIr.transmit(frequency, getListGlobalCache(data));
	}

	protected int[] getListGlobalCache(String irData) {
		List<String> list = new ArrayList<String>(Arrays.asList(irData
				.split(",")));
		list.remove(0);
		int[] intArray = new int[list.size()];
		for (int i = 0; i < list.size(); i++) {
			intArray[i] = Integer.parseInt(list.get(i));
		}
		return intArray;
	}

	protected int getFrequecy(String irData) {
		List<String> list = new ArrayList<String>(Arrays.asList(irData
				.split(",")));
		int frequency = Integer.parseInt(list.get(0));
		return frequency;
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
	}
}